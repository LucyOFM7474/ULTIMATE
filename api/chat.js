 SOLUȚIE RAPIDĂ
Pasul 1: Înlocuiește COMPLET api/chat.js
📄 api/chat.js
export default async function handler(req, res) { res.setHeader('Access-Control-Allow-Origin', '*'); res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS'); res.setHeader('Access-Control-Allow-Headers', 'Content-Type'); if (req.method === 'OPTIONS') { return res.status(200).end(); } if (req.method !== 'POST') { return res.status(405).json({ error: "Metoda nu este permisă" }); } try { const { prompt } = req.body; if (!prompt || typeof prompt !== 'string' || prompt.trim() === '') { return res.status(400).json({ error: "Te rog introdu un meci valid (ex: Rapid - FCSB)", success: false }); } const { OpenAI } = await import('openai'); const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY }); const systemPrompt = `Ești LucyOFM Bot, analist profesionist român de fotbal. Analizează meciul cerut și returnează EXACT 10 puncte numerotate cu simboluri: ✅ consens surse ⚠️ atenție 📊 statistică cheie 🎯 pariu recomandat Structura obligatorie: 1. Cote & predicții externe (SportyTrader, Forebet, etc.) 2. H2H ultimele 5 meciuri directe 3. Forma gazdelor (meciuri acasă) 4. Forma oaspeților (meciuri deplasare) 5. Clasament actual & motivație 6. GG & BTTS procente recente 7. Cornere, posesie, cartonașe - medii 8. Jucători importanți & absențe 9. Predicție scor exact 10. Recomandări pariuri finale Folosește emoji-uri și fii concis dar detaliat.`; const completion = await openai.chat.completions.create({ model: "gpt-4o-mini", messages: [ { role: "system", content: systemPrompt }, { role: "user", content: `Analizează meciul: ${prompt}` } ], max_tokens: 1000, temperature: 0.7 }); const reply = completion.choices[0]?.message?.content; if (!reply) { throw new Error('Răspuns gol de la OpenAI'); } console.log('Success - răspuns primit pentru:', prompt); return res.status(200).json({ reply: reply, success: true, timestamp: new Date().toISOString() }); } catch (error) { console.error('Eroare în handler:', error); return res.status(500).json({ error: `Eroare server: ${error.message}`, success: false, details: process.env.NODE_ENV === 'development' ? error.stack : undefined }); } }
